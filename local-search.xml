<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>二分查找</title>
    <link href="/2023/04/03/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <url>/2023/04/03/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="整数二分"><a href="#整数二分" class="headerlink" title="整数二分"></a>整数二分</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//给出一个有序数组，求该数组中第一个&gt;5的数的位置和最后一个&lt;=5的数的位置</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//第一个&gt;5的数的位置</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">binary_search1</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> len, <span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">-1</span>, r = len;<br><br>    <span class="hljs-keyword">while</span>(l + <span class="hljs-number">1</span> != r) &#123;<br>        <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(a[mid] &lt;= x)<br>            l = mid;<br>        <span class="hljs-keyword">else</span><br>            r = mid;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-comment">//最后一个&lt;=5的数的位置</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">binary_search2</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> len, <span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">-1</span>, r = len;<br><br>    <span class="hljs-keyword">while</span>(l + <span class="hljs-number">1</span> != r) &#123;<br>        <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(a[mid] &gt; x)<br>            r = mid;<br>        <span class="hljs-keyword">else</span><br>            l = mid;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>    <span class="hljs-type">int</span> a[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;;<br><br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">sizeof</span>(a) / <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>);<br><br>    <span class="hljs-comment">//第一个&gt;5的数的位置</span><br>    cout &lt;&lt; <span class="hljs-built_in">binary_search1</span>(a, len, <span class="hljs-number">5</span>) &lt;&lt; endl;<br>    <span class="hljs-comment">//最后一个&lt;=5的数的位置</span><br>    cout &lt;&lt; <span class="hljs-built_in">binary_search2</span>(a, len, <span class="hljs-number">5</span>) &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="浮点二分"><a href="#浮点二分" class="headerlink" title="浮点二分"></a>浮点二分</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//输入一个浮点数n(-10000 &lt;= n &lt;= 10000)，求n的三次方根，小数点向后保留六位</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>    <span class="hljs-type">double</span> n;<br>    cin &gt;&gt; n;    <br><br>    <span class="hljs-type">double</span> l = <span class="hljs-number">-100</span>, r = <span class="hljs-number">100</span>;   <span class="hljs-comment">//-10000 &lt;= n &lt;= 10000，所以n的三次方根c -100 &lt;= c &lt;= 100</span><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123; <br>        <span class="hljs-type">double</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(mid * mid * mid &lt;= n)<br>            l = mid;<br>        <span class="hljs-keyword">else</span><br>            r = mid;<br>    &#125; <br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        循环执行100次后能够将答案精度控制在小数点后30位(但是double的精度大概是15-17位)，此时l和r将会非常接近，将答案四舍五入到6位后 l == r</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.6f\n&quot;</span>, l);<br>    <span class="hljs-comment">//printf(&quot;%.6f\n&quot;, r);</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日记2023-2-18</title>
    <link href="/2023/02/18/%E6%97%A5%E8%AE%B02023-2-18/"/>
    <url>/2023/02/18/%E6%97%A5%E8%AE%B02023-2-18/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs">竟然在太原的一家书店里发现了王小波的杂文集《沉默的大多数》，其实我很早之前就可以在网上买，但是在实体书店真实的触碰到放在书架上还没售出的书真的让我欣喜若狂，于是我毫不犹豫的买了下来。</code></pre><p>我每去一个地方都会选择去看一看当地的书店或图书馆，但这次给我的惊喜是最大的。很早之前我对王小波的了解仅限于他是一个程序员、学数学出身的作家，只知道他有一句话叫做“绝望是无限的美好”，知道这<br>句话有相当程度的原因是因为当时这句话因为被荼毒在网上盛行。今天我读了扉页上的一段话才找到了他身上最让我崇敬的精神——我觉得我还不足以与他产生共鸣，我只是对他的观念崇敬。他写到：一个只会明辨<br>是非的人若是凭脑海中的浩然正气做出一个判断，然后加上一句：难道这不是不言而喻的吗？任何受过一点科学训练的人都知道，这世界上简直找不到什么不言而喻的事，所以这就叫做愚蠢。我要反对愚蠢。</p><p>2023.2.18 于太原</p>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日记2022.11.9</title>
    <link href="/2022/11/09/%E6%97%A5%E8%AE%B02022-11-9/"/>
    <url>/2022/11/09/%E6%97%A5%E8%AE%B02022-11-9/</url>
    
    <content type="html"><![CDATA[<p>2022.11.9 早<br>    昨天晚上和UE4磕了一晚上，越到了后面就越要求能够理解事件的执行机制（优先级什么的），乱用流程结构总是会导致有很多bug，但是这对于初学者，尤其是没有编程基础，不懂得程序设计思想的初学者而言是十分困难的。如果UE4的蓝图有完善的调试功能则可以在很大程度上解决问题。当下的问题就是对于初学者而言他， 无法了解一些深层机制，也无法通过经验解决问题，而一些深入剖析UE底层原理的内容只有经验丰富的老手才能看懂。这也是将一些抽象的东西变得具象化要面对的必然问题，尤其是对于UE这种体量如此之大的游戏引擎而言，所以关于UE的学习必然要伴随着对一些概念和理论的学习和理解。</p><pre><code class="hljs">另外我想起刚去职校的时候有个朋友和我说过一定要参加比赛，就拿如今的省赛来说参加比赛确实是一个好的学习方式，就比如现在学习的UE和我同学学习的建模，确实都是非常实用的技能，即使只有两三个月学习的时间也足</code></pre><p>以学到很多。</p>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈</title>
    <link href="/2022/10/12/%E6%A0%88/"/>
    <url>/2022/10/12/%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<ul><li><p>栈的定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>        ElemType data[<span class="hljs-number">100</span>];<br>        <span class="hljs-type">int</span> top;<br>&#125;SqStack;<br></code></pre></td></tr></table></figure></li><li><p>栈的基本操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//栈的初始化</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">StackInit</span><span class="hljs-params">(SqStack *p)</span> &#123;<br>        *p-&gt;data = <span class="hljs-literal">NULL</span>;<br>        p-&gt;top = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//进栈</span><br>Status <span class="hljs-title function_">Push</span><span class="hljs-params">(SqStack *S, ElemType e)</span> &#123;<br>        <span class="hljs-keyword">if</span>(S-&gt;top == MAXSIZE - <span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">return</span> ERROR;<br>        S-&gt;top++;<br>        S-&gt;data[S-&gt;top] = e;<br><br>        <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//出栈</span><br>Status <span class="hljs-title function_">Pop</span><span class="hljs-params">(SqStack *S, ElemType *e)</span> &#123;<br>        <span class="hljs-keyword">if</span>(S-&gt;top == <span class="hljs-number">-1</span>)<br>                <span class="hljs-keyword">return</span> ERROR;<br>        *e = S-&gt;data[S-&gt;top];<br>        S-&gt;top--;<br>        <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单链表的整表创建和整表删除</title>
    <link href="/2022/10/06/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%95%B4%E8%A1%A8%E5%88%9B%E5%BB%BA%E5%92%8C%E6%95%B4%E8%A1%A8%E5%88%A0%E9%99%A4/"/>
    <url>/2022/10/06/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%95%B4%E8%A1%A8%E5%88%9B%E5%BB%BA%E5%92%8C%E6%95%B4%E8%A1%A8%E5%88%A0%E9%99%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="单链表的整表创建和删除"><a href="#单链表的整表创建和删除" class="headerlink" title="单链表的整表创建和删除"></a>单链表的整表创建和删除</h1><ul><li><p>单链表的整表创建</p><ul><li><p>头插法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c">    <span class="hljs-type">void</span> <span class="hljs-title function_">CreateListHead</span><span class="hljs-params">(LinkList *L, <span class="hljs-type">int</span> n)</span> &#123;<br>            linKlist p;<br>            <span class="hljs-type">int</span> i;<br>    <br>            srand(time(<span class="hljs-number">0</span>));<br>    <br>            *L = (LinkList)Malloc(<span class="hljs-keyword">sizeof</span>(Node));<br>            (*L) -&gt; next = <span class="hljs-literal">NULL</span>;<br>    <br>            <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>                    p = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>                    p-&gt;data = rand() % <span class="hljs-number">100</span> + <span class="hljs-number">1</span>;<br>                    p-&gt;next = (*L)-&gt;next;<br>                    (*L)-&gt;next = p;<br>            &#125;<br>&#125;<br>  <br></code></pre></td></tr></table></figure></li><li><p>尾插法</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">CreateListTail</span><span class="hljs-params">(LinkList *L, <span class="hljs-type">int</span> n)</span> &#123;<br>        linklist p, r;<br>        <span class="hljs-type">int</span> i;<br><br>        strand(time(<span class="hljs-number">0</span>));<br>        *L = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>        r= *L;<br><br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>                p = (Node *)Malloc(<span class="hljs-keyword">sizeof</span>(Node));<br>                p-&gt;data = rand() % <span class="hljs-number">100</span> + <span class="hljs-number">1</span>;<br>                r-&gt;next = p;<br>                r = p;<br>        &#125;<br><br>      r-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>单链表的整表删除</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">ClearList</span><span class="hljs-params">(LinList *L)</span> &#123;<br>        LinKList p, q;<br><br>        p = (*L)-&gt;next;<br><br>        <span class="hljs-keyword">while</span>(p) &#123;<br>                q = p-&gt;next;<br>                <span class="hljs-built_in">free</span>(p);<br>                p = q;<br>        &#125;<br><br>        (*L)-&gt;next = <span class="hljs-literal">NULL</span>;<br><br>        <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单链表插入和删除</title>
    <link href="/2022/10/06/%E5%8D%95%E9%93%BE%E8%A1%A8%E6%8F%92%E5%85%A5%E5%92%8C%E5%88%A0%E9%99%A4/"/>
    <url>/2022/10/06/%E5%8D%95%E9%93%BE%E8%A1%A8%E6%8F%92%E5%85%A5%E5%92%8C%E5%88%A0%E9%99%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="单链表的插入和删除"><a href="#单链表的插入和删除" class="headerlink" title="单链表的插入和删除"></a>单链表的插入和删除</h1><ul><li><p>引用和约定俗成的定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FALSE 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TRUE 1</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ElemType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Status;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>    ElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">Next</span>;</span><br>&#125; Node;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">LinkList</span>;</span><br></code></pre></td></tr></table></figure><ul><li><p>插入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">LinkInsert</span><span class="hljs-params">(LinkList *L, <span class="hljs-type">int</span> i, ElemType e)</span> &#123;<br>    <span class="hljs-type">int</span> j;<br>    LinkInsert p, s;<br>    <br>    j = <span class="hljs-number">1</span>;<br>    p = L-&gt;next;<br>    <br>    <span class="hljs-keyword">while</span>(p &amp;&amp; j &lt; i) &#123;<br>        p = p-&gt;next;<br>        ++j;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!p || j &gt; i) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <br>    s = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>    s-&gt;data = e;<br>    <br>    s-&gt;next = p-&gt;next;<br>    p-&gt;next = s;<br>    <br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>删除</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">ListDelete</span><span class="hljs-params">(LinkList *L, <span class="hljs-type">int</span> i, ElemType *e)</span> &#123;<br>    <span class="hljs-type">int</span> j;<br>    LinkList p, q;<br>   j = <span class="hljs-number">1</span>;<br>    p = *L;<br>    <br>    <span class="hljs-keyword">while</span>(p-&gt;next &amp;&amp; j &lt; i) &#123;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!(p-&gt;next) || j &gt; i) &#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <br>    q = p-&gt;next;<br>    p-&gt;next = q-&gt;next;<br>    <br>    *e = q-&gt;data;<br>    <span class="hljs-built_in">free</span>(q);<br>    <br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线性表顺序存储</title>
    <link href="/2022/10/06/%E7%BA%BF%E6%80%A7%E8%A1%A8%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/"/>
    <url>/2022/10/06/%E7%BA%BF%E6%80%A7%E8%A1%A8%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="线性表的顺序存储"><a href="#线性表的顺序存储" class="headerlink" title="线性表的顺序存储"></a>线性表的顺序存储</h1><ul><li><p>约定俗成的定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TRUE 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FALSE 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 20 <span class="hljs-comment">//此处定义为20</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ElemType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Status;<br></code></pre></td></tr></table></figure></li><li><p>结构定义</p></li></ul> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    ElemType data[MAXSIZE];<br>    <span class="hljs-type">int</span> length;<br>&#125; SqList;<br></code></pre></td></tr></table></figure><ul><li>读取操作</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">GetElem</span><span class="hljs-params">(SqList L, <span class="hljs-type">int</span> i, ElemType *e)</span> &#123;<br>    <span class="hljs-keyword">if</span>(L.length == <span class="hljs-number">0</span> || i &lt; <span class="hljs-number">1</span> || i &gt; L.length) &#123;<br>            <span class="hljs-keyword">return</span> ERROR;<br>        &#125;<br>    *e = L.data[i - <span class="hljs-number">1</span>];<br>    <br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>并集操作</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">unionL</span><span class="hljs-params">(List *La, List lb)</span> &#123;<br>    <span class="hljs-type">int</span> La_len, Lb_len, i;<br>    <br>    ElemType e;<br>    La_len = ListLength(*La);<br>    Lb_len = ListLength(Lb);<br>    <br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>; i &lt;= b; i++) &#123;<br>        GetElem(Lb, i, &amp;e);<br>        <span class="hljs-keyword">if</span>(!LocateElem(*La, e)) &#123;<br>            ListInsert(La, ++La_len. e);<br>        &#125;<br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>插入操作</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">ListInsert</span><span class="hljs-params">(SqList *L, <span class="hljs-type">int</span> i, ElemType e)</span> &#123;<br>        <span class="hljs-type">int</span> k;<br><br>        <span class="hljs-keyword">if</span>(L-&gt;length == MAXSIZE) &#123;<br>                <span class="hljs-keyword">return</span> ERROR;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">1</span> || i &gt; L-&gt;Length + <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">return</span> ERROR;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i &lt;= L-&gt;length) &#123;<br>                <span class="hljs-keyword">for</span>(k = L-&gt;length - <span class="hljs-number">1</span>; k &gt;= i - <span class="hljs-number">1</span>; k--) &#123;<br>                                        L-&gt;data[k + <span class="hljs-number">1</span>] = L-&gt;data[k];<br>                                &#125;<br>        &#125;<br><br>        L-&gt;data[i - <span class="hljs-number">1</span>] = e;<br>        L-&gt;length++;<br><br>        <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>删除操作</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">ListDelete</span><span class="hljs-params">(SqList *L, <span class="hljs-type">int</span> i, ElemType *e)</span> &#123;<br>        <span class="hljs-type">int</span> k;<br><br>        <span class="hljs-keyword">if</span>(L-&gt;length == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> ERROR;<br>        <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">1</span> || i &gt; L-&gt;length)<br>                <span class="hljs-keyword">return</span> ERROR;<br><br>        *e = L-&gt;datap[i - <span class="hljs-number">1</span>];<br><br>        <span class="hljs-keyword">if</span>(i &lt; L-&gt;length) &#123;<br>                <span class="hljs-keyword">for</span>(k = i; k &lt; L-&gt;length; k++) &#123;<br>                        L-&gt;data[k - <span class="hljs-number">1</span>] = L-&gt;data[k];<br>                &#125;<br>        &#125;<br><br>        L-&gt;length--;<br>        <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线性表的插入和删除操作</title>
    <link href="/2022/10/05/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E5%92%8C%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/10/05/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E5%92%8C%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="线性表的插入和删除操作"><a href="#线性表的插入和删除操作" class="headerlink" title="线性表的插入和删除操作"></a>线性表的插入和删除操作</h1><ul><li><p>插入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">ListInsert</span><span class="hljs-params">(SqList *L, <span class="hljs-type">int</span> i, ElemType e)</span> &#123;<br>    <span class="hljs-type">int</span> k;<br>    <br>    <span class="hljs-keyword">if</span>(L-&gt;length == MAXSIZE)<br>        <span class="hljs-keyword">return</span> ERROR;<br>    <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">1</span> || i &gt; L-&gt;length + <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> ERROR;<br>    <span class="hljs-keyword">if</span>(i &lt;= L-&gt;length) &#123;<br>        <span class="hljs-keyword">for</span>(k = L-&gt;length - <span class="hljs-number">1</span>; k &gt;= i - <span class="hljs-number">1</span>; k--) <br>            L-&gt;data[k + <span class="hljs-number">1</span>] = L-&gt;data[k];<br>    &#125;<br>    <br>L-&gt;data[i - <span class="hljs-number">1</span>] = e;<br>    L-&gt;length++;<br>    <br>    <span class="hljs-keyword">return</span> OK<br>&#125;<br></code></pre></td></tr></table></figure><p>插入的时间复杂度为</p></li><li><p>删除</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">ListDelete</span><span class="hljs-params">(SqList *L, <span class="hljs-type">int</span> i, ElemType *e)</span> &#123;<br>    <span class="hljs-type">int</span> k;<br>    <br>    <span class="hljs-keyword">if</span>(L-&gt;length == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> ERROR;<br>    <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">1</span> || i &gt; L-&gt;length) <br>        <span class="hljs-keyword">return</span> ERROR;<br>    *e = L-&gt;data[i - <span class="hljs-number">1</span>];<br>    <br>    <span class="hljs-keyword">if</span>(i &lt; L-&gt;length) &#123;<br>        <span class="hljs-keyword">for</span>(k = i; k &lt; L-&gt;length; k++)<br>            L-&gt;data[k - <span class="hljs-number">1</span>] = L-&gt;data[k];<br>    &#125;<br>    <br>    L-&gt;length --;<br>    <span class="hljs-keyword">return</span> ok;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>时间复杂度：</p><h6 id="最好情况："><a href="#最好情况：" class="headerlink" title="最好情况："></a>最好情况：</h6><p>如果要插入或删除的元素在最后一个位置，时间复杂度为O(1)</p><h6 id="最坏情况："><a href="#最坏情况：" class="headerlink" title="最坏情况："></a>最坏情况：</h6><p>如果要插入或删除的元素在第一个位置，则要进行n次操作，时间复杂度为O(n)</p><h6 id="平均情况："><a href="#平均情况：" class="headerlink" title="平均情况："></a>平均情况：</h6><p>O((n - 1) &#x2F; 2)</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>text</title>
    <link href="/2022/10/05/text/"/>
    <url>/2022/10/05/text/</url>
    
    <content type="html"><![CDATA[<ul><li>this is a test text</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/10/04/hello-world/"/>
    <url>/2022/10/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
